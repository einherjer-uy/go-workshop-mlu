Golang workshop - 3ª Parte

Montevideo
Julio 2018

Diego Romero
Andrés Sica


* Presentación 

https://bit.ly/2JQ764X


* Paralelismo vs Concurrencia

.image ./resources/concurrency_parallelism.png              

Una excelente charla!

Rob Pike (Co-Creador de Go)
.link https://blog.golang.org/concurrency-is-not-parallelism

: concurrency - composition of independently executing processes
: paralallism - simultaneous execution
: Ej. el SO se estructura para q varios IO devices puedan ejecutar concurrentemente pero no necesariamente en paralelo (si tengo 1 CPU).
: concurrency permite estructurar para poder aprovechar el paralelismo (aunque lo ejecutes en 1 solo cpu podes usar las features de go)
: concurrency facilita escribir codigo concurrente sin errores. (Go soporta concurrencia en el lenguaje, no en una libreria, eso cambia como estructuramos el programa, permite estructurar la concurrencia a un nivel de abstraccion superior)


* Goroutines

Funcion que se ejecuta de forma independiente (posiblemente en paralelo), en el mismo espacio de memoria y con su propio stack.

.play -edit ./resources/src/14_gorutines/main.go

: si comento el sleep se va sin imprimir "world"
: NO son threads (schedule by go not the OS)
: overhead minimo (KBs), es viable tener millones
: simplifica sintaxis pero tb performance
: es seguro enviar y recibir de forma concurrente (elimina el problema del shared state)


* Channels

Un channel en Golang es un tipo de dato, que nos permite enviar y recibir mensajes a través de él, tipicamente para comunicar y sincronizar goroutines.

Creación de un channel:

	var sChannel chan string = make(chan string)

El operador <- nos permite enviar información a un channel:

	sChannel <- "hello"

y recibir información desde él:

	var s string = <- sChannel

los channels son bloqueantes; el receptor se bloquea hasta que haya un mensaje y el emisor se bloquea hasta que haya un receptor. Esto los hace una excelente herramienta para sincronizar goroutines sin un mecanismo de lock especifico.


* Channels (cont.)

A la creación de un channel se le puede asignar un tamaño dando lugar a un buffered Channel:
 
	var sChannel chan string = make(chan string, 100)
 
en estos casos el emisor sólo se bloqueará cuando el buffer esté lleno (y el receptor, al igual que con unbuffer, se bloqueará cuando el channel esta vacio)
 
Para iterar sobre el contenido de un channel podemos utilizar el for + range:
 
	for s := range sChannel {
		// do something with s
	}


* Channels (cont.)

Usamos la built-in fuction "close" para cerrar un channel e indicar a todos los consumers que dicho channel no se van a enviar más elementos y así liberarlos.
 
	close(intChannel)
 
los consumers pueden chequear el status de un channel mediante un segundo parámetro en la expresión de asignación:
 
	v, ok := <- sChannel

: close no es mandatorio (como con files o conexiones), solo cuando hay q indicar al receptor que no hay mas mensajes, p.ej. para terminar un for range


* Channels: Simple channel

.play -edit ./resources/src/22_channels/simple/main.go

: funcion anonima, muy usado para tener en un solo lugar que es lo que esta corriendo en la goroutina 
: deadlock sin hago sChannel <- "hello" fuera de goroutina (porque se bloquea en el envio y no hay nadie que lea)
: si es buffered no se bloquea (podria hacer el print 2 veces, pero no 3, ahi estaria de nuevo en deadlock porque no hay nadie escribiendo)


* Channel Synchronization

.play -edit ./resources/src/22_channels/synchronization/basic/main.go /START OMIT/,/END OMIT/

: mostrar que si en vez de pasar id por param uso el i del range imprime siempre worker 3 que es el valor del indice el range al momento q la goroutina se ejecuta
: mostrar que el channel si lo accedo como closure (si no fuese una funcion anonima tendria que pasarlo por param)


* Channel Synchronization

.play -edit ./resources/src/22_channels/synchronization/basic2/main.go /START OMIT/,/END OMIT/


* Channel Synchronization

.play -edit ./resources/src/22_channels/synchronization/select/main.go /START OMIT/,/END OMIT/


* Ejercicio

Dado un array de strings, contar de forma concurrente la aparición de letras entre todos los strings dados.

Tip, para recorrer las letras de un string:

	for _, l := range word {
		print(string(l))
	}

.play -edit ./resources/src/exercises/part3/main.go /START OMIT/,/END OMIT/

